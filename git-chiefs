#!/usr/bin/env bash

COMPARE_BRANCH=$( git config --get chief.referene || echo "master")
IGNORE_BRANCHES=$(git config --get chief.ignore   || echo "")
REMOTE_NAME=$(    git config --get chief.remote   || echo "origin")

set -e

function detectOwner() 
{
    local master=$1
    local topic=$2

    echo $(git shortlog --no-merges --first-parent --summary \
        $master..$topic \
        | sort -r \
        | head -n 1 \
        | tr -d "\t" \
        | sed "s/^ *\([0-9]*\) *\(.*\)/\2 (\1)/g")
}

function detectAncestor()
{
    local master=$1
    local topic=$2
    
    # See: http://stackoverflow.com/a/4991675
    echo $(diff -u \
        <(git rev-list --first-parent $master) \
        <(git rev-list --first-parent $topic) \
        | sed -ne 's/^ //p' \
        | head -n 1)
}

function listBranches()
{
    local remote=$1
    local ignoredBranches=$2

    local branches=$(git branch -r \
        | cut -c2- \
        | grep $remote \
        | egrep -v "HEAD")

    if [ "$ignoredBranches" != "" ]; then
        branches=$(echo "$branches" \
            | egrep -v $ignoredBranches)
    fi

    echo $branches
}

function colorizeOwner()
{
    local owner=$@

    local COLOR_RED="\033[0;31m"
    local COLOR_BLUE="\033[0;34m"
    local COLOR_RESET="\033[0m"

    if [ "$owner" == "" ]; then
        echo "${COLOR_RED}UNKNOWN${COLOR_RESET}"
    else
        echo "${COLOR_BLUE}${owner}${COLOR_RESET}"
    fi
}

for branch in $(listBranches $REMOTE_NAME "$IGNORE_BRANCHES"); do
    owner=$(detectOwner $REMOTE_NAME/$COMPARE_BRANCH $branch)

    if [ "$owner" == "" ]; then
        # This is a little slower / complicated, but can resolve already 
        # merged branches.
        ancestor=$(detectAncestor $REMOTE_NAME/$COMPARE_BRANCH $branch)
        owner=$(detectOwner $ancestor $branch)
    fi

    owner=$(colorizeOwner $owner)
    echo -e "${branch} - ${owner}"
done
